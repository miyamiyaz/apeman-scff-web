/**
 * Configuration file for apeman projects.
 * @see https://github.com/apeman-labo/apeman
 */

"use strict";

module.exports = {
    /** Current working directory path */
    get $cwd() {
        return __dirname;
    },
    /** Package data. */
    get $pkg() {
        return require('./package.json');
    },
    /** Prototype projects */
    get $proto() {
        return [
            require('apeman-proto-abstract'),
            require('apeman-proto-basic'),
            require('apeman-proto-git'),
            require('apeman-proto-sure'),
            require('apeman-proto-npm'),
            require('apeman-proto-locale'),
            require('apeman-proto-coverage'),
            require('apeman-proto-codeclimate'),
            require('apeman-proto-env'),
            require('apeman-proto-travis')
        ];
    },
    /** Children projects */
    get $children() {
        return [
            require('./app/api/Apemanfile'),
            require('./app/ui/Apemanfile'),
            require('./asset/Apemanfile'),
            require('./db/Apemanfile'),
            require('./lib/browser-lib/Apemanfile'),
            require('./lib/node-lib/Apemanfile')
        ]
    },
    /**
     * apeman tmpl configurations.
     * @see https://github.com/apeman-labo/apeman-tmpl
     */
    get $tmpls() {
        var ci = require('apeman-tmpl-ci'),
            dot = require('apeman-tmpl-dot'),
            readme = require('apeman-tmpl-readme');

        return {
            'ci/build.js': ci({cmd: 'task', args: 'build'}),
            'ci/misc/build_api_app.js': ci({cmd: 'task', args: 'app:api:build'}),
            'ci/misc/build_asset.js': ci({cmd: 'task', args: 'asset:build'}),
            'ci/misc/build_ui_app.js': ci({cmd: 'task', args: 'app:ui:build'}),
            'ci/misc/build_browser_lib.js': ci({cmd: 'task', args: 'lib:browser:build'}),
            'ci/misc/install_bower.js': ci({cmd: 'task', args: 'bower:install'}),
            'ci/misc/build_node_lib.js': ci({cmd: 'task', args: 'lib:node:build'}),
            'ci/report.js': ci({cmd: 'task', args: 'report'}),
            'ci/release.js': ci({cmd: 'task', args: 'release'}),
            'doc/readme/01 - Requirements.md.hbs': readme({type: 'requirementsSection'}),
            'doc/readme/02 - Setup.md.hbs': readme({type: 'setupSection'}),
            'doc/links.json': '{}',
            'doc/overview.md': '',
            '.README.md.bud': dot({type: 'readmeMdBud'}),
            '.LICENSE.md.bud': dot({type: 'licenseBud'})
        }
    },
    /**
     * apeman task configurations.
     * @see https://github.com/apeman-labo/apeman-task
     */
    get $tasks() {
        var chmod = require('apeman-task-chmod'),
            mkdir = require('apeman-task-mkdir'),
            task = require('apeman-task-task'),
            tmpl = require('apeman-task-tmpl'),
            coz = require('apeman-task-coz'),
            execcli = require('apeman-task-execcli'),
            symlink = require('apeman-task-symlink'),
            bower = require('apeman-task-bower'),
            watch = require('apeman-task-watch');


        function _task(apemanfile, taskName) {
            return task(taskName, {
                configuration: require.resolve(apemanfile)
            });
        }

        function _watch(apemanfile, watchName) {
            return watch(watchName, {
                configuration: require.resolve(apemanfile)
            });
        }

        var _apiAppTask = _task.bind(_task, './app/api/Apemanfile'),
            _uiAppTask = _task.bind(_task, './app/ui/Apemanfile'),
            _assetTask = _task.bind(_task, './asset/Apemanfile'),
            _dbTask = _task.bind(_task, './db/Apemanfile'),
            _browserLibTask = _task.bind(_task, './lib/browser-lib/Apemanfile'),
            _nodeLibTask = _task.bind(_task, './lib/node-lib/Apemanfile');

        var _uiAppWatch = _watch.bind(_watch, './app/ui/Apemanfile');

        return {
            'app:api:build': _apiAppTask('build'),
            'app:ui:build': _uiAppTask('build'),
            'asset:build': _assetTask('build'),
            'db:build': _dbTask('build'),
            'lib:browser:build': _browserLibTask('build'),
            'lib:node:build': _nodeLibTask('build'),
            'build': [
                'struct',
                'render',
                'asset:build',
                'app:api:build',
                'app:ui:build',
                'db:build',
                'lib:browser:build',
                'lib:node:build'
            ],
            'install': [
                'npm:install',
                'bower:install'
            ],
            'bower:install': bower([
                'font-awesome',
                'ionicons'
            ]),
            'coz:render': coz([
                '.*.bud',
                'test/**/.*.bud'
            ]),
            'setup': [
                'install',
                'cmd:tmpl',
                'build'
            ],
            'struct': [
                'fs:mkdir',
                'fs:chmod',
                'fs:symlink'
            ],
            'fs:mkdir': mkdir([
                'app',
                'app/api',
                'app/ui',
                'app/admin-api',
                'app/admin-ui',
                'asset',
                'bin',
                'ci',
                'ci/misc',
                'db',
                'doc',
                'doc/readme',
                'lib',
                'lib/browser-lib',
                'lib/node-lib',
                'locale',
                'tmp',
                'var',
                'var/log',
                'var/log/api-log',
                'var/log/admin-api-log',
                'var/log/ui-log',
                'var/log/admin-ui-log'
            ]),
            'fs:symlink': [],
            'test': [],
            'release': [
                'sure:release',
                'build',
                'test',
                'git:tag',
                'npm:publish',
                'npm:versionup',
                'git:push'
            ],
            'report': [
                'codeclimate:send'
            ],
            'update': [
                'npm:update'
            ],
            'watch': [
                'watch:ui-app'
            ],
            'watch:ui-app': _uiAppWatch('all')
        }
    }
};


if (!module.parent) {
    // Execute this file as apeman bin.
    require('apeman').cli(process.argv);
}
